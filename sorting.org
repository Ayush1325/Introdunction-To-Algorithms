* Comparison Of Different Sorting Algorithms
| Algorithm      | Worst-case  | Average-case |
|----------------+-------------+--------------|
| Insertion Sort | \Theta(n^2)       | \Theta(n^2)        |
| Merge Sort     | \Theta(n\ln{n})  | \Theta(n\ln{n})   |
| Heapsort       | \Omicron(n\ln{n})  |              |
| Quick Sort     | \Theta(n^2)       | \Theta(n\ln{n})   |
| Counting Sort  | \Theta(k + n)    | \Theta(k + n)     |
| Radix Sort     | \Theta(d(k + n)) | \Theta(d(k + n))  |
| Bucket Sort    | \Theta(n^2)       | \Theta(n)         |

* Comparison Sort
- Gets information about elements only by comparing them
- Can only be \Theta(n\log{n})
** Insertion Sort
- This is the basic version of insertion sort.
- Worst time: 
#+BEGIN_EXPORT latex 
\Theta(n^2) 
#+END_EXPORT
*** Code
**** Rust
#+begin_src rust
  fn sort(arr: &mut [i32]) {
      let len = arr.len();
      for i in 1..len {
          let mut j = i;
          let key = arr[i];
          while j > 0 && arr[j - 1] > key {
              arr[j] = arr[j - 1];
              j -= 1;
          }
          arr[j] = key;
      }
  }
#+end_src
**** Clojure
#+BEGIN_SRC clojure :results output
  (defn ins-sort [arr]
    (reduce (fn [res inp]
              (let [[less more] (split-with #(< % inp) res)]
                (concat less [inp] more)))
            []
            arr))

  (test-runner ins-sort)
#+END_SRC

#+RESULTS:
: true
: true

** Merge Sort
- Worst Time: 
#+BEGIN_EXPORT latex
\Theta(n\log{n})
#+END_EXPORT
*** Code
**** Rust 
#+BEGIN_SRC rust
  fn divide(arr: &mut [i32], start: usize, end: usize) {
      if start < end {
          let len = end - start;
          let mid = (len / 2) + start;
          divide(arr, start, mid);
          divide(arr, mid + 1, end);
          merge(arr, start, mid, mid + 1, end)
      }
  }

  fn merge(arr: &mut [i32], s1: usize, e1: usize, s2: usize, e2: usize) {
      let mut temp: Vec<i32> = Vec::new();
      let mut c1 = s1;
      let mut c2 = s2;
      while c1 <= e1 && c2 <= e2 {
          if arr[c1] < arr[c2] {
              temp.push(arr[c1]);
              c1 += 1;
          } else {
              temp.push(arr[c2]);
              c2 += 1;
          }
      }

      while c1 <= e1 {
          temp.push(arr[c1]);
          c1 += 1;
      }

      while c2 <= e1 {
          temp.push(arr[c2]);
          c2 += 1;
      }

      for (index, item) in temp.iter().enumerate() {
          arr[s1 + index] = *item;
      }
  }
#+END_SRC
**** Clojure
#+BEGIN_SRC clojure :results output
  (defn merge-vec [[l & lrest :as left] [r & rrest :as right]]
    (if (and (not-empty left) (not-empty right))
      (if (> l r)
        (conj (merge-vec left rrest) r)
        (conj (merge-vec lrest right) l))
      (concat left right)))

  (defn merge-sort [arr]
    (if (<= (count arr) 1)
      arr
      (let [[left right] (split-at (quot (count arr) 2) arr)]
        (merge-vec (merge-sort left) (merge-sort right)))))

  (test-runner merge-sort)
#+END_SRC

#+RESULTS:
: true
: true

** Combine-sort
- A combination of insertion sort and merge sort
- Worst time: 
#+BEGIN_EXPORT latex
\Theta(nk + n\log(n/k))
#+END_EXPORT
*** Code
**** Rust
#+BEGIN_SRC rust
  fn modified_divide(arr: &mut [i32], start: usize, end: usize) {
      if start < end {
          let len = end - start;
          if len < 10 {
              super::insertion_sort::recursive(&mut arr[start..(end + 1)], len);
          } else {
              let mid = (len / 2) + start;
              modified_divide(arr, start, mid);
              modified_divide(arr, mid + 1, end);
              super::merge_sort::merge(arr, start, mid, mid + 1, end);
          }
      }
  }
#+END_SRC
**** Clojure
#+BEGIN_SRC clojure :results output
  (defn modified-divide [arr]
    (if (<= (count arr) 10)
      (ins-sort arr)
      (let [[left right] (split-at (quot (count arr) 2) arr)]
        (merge-vec (modified-divide left) (modified-divide right)))))

  (test-runner modified-divide)
#+END_SRC

#+RESULTS:
: true
: true

** Bubble Sort
- Another sorting algorithm
- Worst time: 
#+BEGIN_EXPORT latex
\Theta(n^2)
#+END_EXPORT
- Code:
#+BEGIN_SRC clojure :results output
  (defn bubble
    ([xs] (bubble xs [] false))
    ([[x y & xs] ys changed]
     (if (nil? y)
       [(conj ys x) changed]
       (if (> x y)
         (recur (cons x xs) (conj ys y) true)
         (recur (cons y xs) (conj ys x) changed)))))

  (defn bubble-sort [xs]
    (loop [[ys changed] (bubble xs)]
      (if changed
        (recur (bubble ys))
        ys)))

  (test-runner bubble-sort)
#+END_SRC

#+RESULTS:
: true
: true

** Heap Sort
*** Theory
- A good implementation of quicksort beats it in practice.
*** Worst Time
#+BEGIN_EXPORT latex
\Theta(n\log{n})
#+END_EXPORT
*** Code
**** Rust
#+begin_src rust
  mod heap_opr {
      pub fn parent(x: usize) -> usize {
          (x - 1) >> 1
      }

      pub fn left(x: usize) -> usize {
          (x << 1) + 1
      }

      pub fn right(x: usize) -> usize {
          (x << 1) + 2
      }
  }

  fn max_heapify(arr: &mut [i32], i: usize, heap_size: usize) {
      let left = heap_opr::left(i);
      let right = heap_opr::right(i);
      let mut largest = i;
      if left < heap_size && arr[left] > arr[largest] {
          largest = left;
      }
      if right < heap_size && arr[right] > arr[largest] {
          largest = right;
      }
      if largest != i {
          arr.swap(i, largest);
          max_heapify(arr, largest, heap_size);
      }
  }

  fn build_max_heap(arr: &mut [i32]) {
      for i in (0..heap_opr::parent(arr.len())).rev() {
          max_heapify(arr, i, arr.len());
      }
  }

  fn heap_sort(arr: &mut [i32]) {
      let mut heap_size = arr.len();
      build_max_heap(arr);
      for i in (1..arr.len()).rev() {
          arr.swap(i, 0);
          heap_size -= 1;
          max_heapify(arr, 0, heap_size);
      }
  }
#+end_src
** Quick Sort
*** Theory
- Outputrforms heap and merge Sort in most cases
- Also works well in virtual memory environments.
- In place sorting.
**** Worst Case
\Theta(n^2)
**** Average Case
\Theta(n*log{n})
**** Code
***** Rust
#+begin_src rust
  fn quick_sort(arr: &mut [i32]) {
      let len = arr.len();
      if len == 0 || len == 1 {
          return;
      }
      let p = rand_partition(arr);
      quick_sort(&mut arr[0..p]);
      quick_sort(&mut arr[(p + 1)..]);
  }

  fn rand_partition(arr: &mut [i32]) -> usize {
      let mut rng = rand::thread_rng();
      let p = rng.gen_range(0, arr.len());
      arr.swap(p, arr.len() - 1);
      partition(arr)
  }

  fn partition(arr: &mut [i32]) -> usize {
      let len = arr.len();
      if len == 0 || len == 1 {
          return 0;
      }
      let p = arr[len - 1];
      let mut i = 0;
      for j in 0..(len - 1) {
          if arr[j] <= p {
              arr.swap(i, j);
              i += 1;
          }
      }
      arr.swap(i, len - 1);
      i
  }

#+end_src
* Other Sorts
- Use things other than comparison to gather info about elements.
** Counting Sort
*** Theory
**** Worst Case
\Theta(n)
*** Code
**** Rust
#+begin_src rust
  fn counting_sort(arr: &[usize], low: usize, high: usize) -> Vec<usize> {
      let mut c = vec![0; high];
      let mut b = Vec::new();
      for i in arr.iter() {
          c[*i] += 1;
      }
      for (i, j) in c.iter().enumerate() {
          b.extend(vec![low + i; *j])
      }
      b
  }
#+end_src
** Radix Sort
*** Code
**** Rust
#+begin_src rust
  fn get_num(x: &str, p: usize) -> char {
      match x.chars().rev().nth(p) {
          Some(a) => a,
          None => '0',
      }
  }

  fn radiax_sort(arr: &mut [&str], max: usize) {
      for i in 0..max {
          arr.sort_by(|a, b| get_num(a, i).cmp(&get_num(b, i)));
      }
  }
#+end_src
**** Clojure
#+begin_src clojure
  (defn radiax-sort [arr]
    (loop [x (range (count (apply max-key count arr)))
           y arr]
      (println y)
      (if (empty? x)
        y
        (recur (rest x)
               (sort-by #(nth (reverse %) (first x) \0) y)))))
#+end_src
* Tests
#+BEGIN_SRC clojure
  (def simple-list [2 4 6 1 3 7 2])
  (def complex-list (into [](take 100 (repeatedly #(rand-int 1000)))))

  (defn test-runner [func]
    (doseq [item [simple-list complex-list]]
      (println (= (sort item) (func item)))))
#+END_SRC

#+RESULTS:
: #'user/simple-list#'user/complex-list#'user/test-runner
