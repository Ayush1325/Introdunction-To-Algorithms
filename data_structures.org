* Dynamic Sets
- Basically all data structures like Heaps, Stacks etc are dynamic sets.
** Operations
*** Queries
- Simply return info about the set
**** Search(S, k)
**** Minimum(S)
**** Maximum(S)
**** Successor(S, x)
**** Predecessor(S, x)
*** Modifying Operations
- Change the set
**** Insert(S, x)
**** Delete(S, x)

* Heaps
** Priority Queues
- It is a data structure for maintaining a set S of elements, each with an associated value called key.
- Can be *max-priority-queue* or *min-priority-queue*.
*** Supports the following operations
**** Insert
#+begin_src rust
  fn max_heap_insert(arr: &mut Vec<i32>, key: i32) {
      arr.push(0);
      let x = arr.len();
      heap_increase_key(arr, x - 1, key);
  }
#+end_src
**** Maximum/Minimum
- Returns largest key.
#+begin_src rust
  fn heap_max(arr: &[i32]) -> i32 {
      ,*arr.first().expect("Heap Empty")
  }
#+end_src
**** Extract Max/Min
- Removes element with largest key.
#+begin_src rust
  fn extract_max(arr: &mut Vec<i32>) -> Result<i32, String> {
      if arr.is_empty() {
          return Err(String::from("Heap Underflow"));
      }
      let max = arr[0];
      arr[0] = *arr.last().expect("");
      arr.pop();
      let len = arr.len();
      max_heapify(arr, 0, len);
      Ok(max)
  }
#+end_src
**** Increase-Key/Decrease-Key
- Increases value of element x's key to the new value y which is assumed to be at lease as large as x's current key.
#+begin_src rust
  fn heap_increase_key(arr: &mut [i32], i: usize, key: i32) {
      let mut j = i;
      arr[j] = key;
      while j > 0 && arr[heap_opr::parent(j)] < arr[j] {
          arr.swap(heap_opr::parent(j), j);
          j = heap_opr::parent(j);
      }
  }
#+end_src
*** Uses
- Schedule jobs on a shared computer.

* Stacks
- Last-in First-out(LIFO)
- Can be implemented with normal arrays.
- Vectors can be operated as stacks, at least in rust. So don't see need to reimplement.
** Operations
*** Push
*** Pop
*** Empty
- Check if empty

* Queues
- First-in First-out(FIFO)
- Again, can be implemented with arrays. Not much reason to reimplement.
** Operations
*** Enqueue
- Insert to stack
*** Dequeue
- Delete from stack

* Linked List
- Its objects are arranged in linear order
- Each element contains pointers to other elements.
- Not always the most efficient dynamic set.
** Types
*** Single Linked
- Each element only points to the next element.
#+begin_src rust
  struct Element<T> {
      val: Option<T>,
      next: Box<Element<T>>,
  }

#+end_src
*** Double Linked
- Each elemet contains pointers to next and previous element.
#+begin_src rust
  struct Element<T> {
      val: Option<T>,
      next: Box<Element<T>>,
      prev: Box<Element<T>>
  }
#+end_src
*** Circular
- The last element points to the first element.
** Operations
*** Searching
*** Inserting
*** Deleting
** Implementation
- Delete is too much of a pain in rust.
- Much better to use built in types.
#+begin_src rust
  struct Node<T> {
      val: T,
      next: NodeOption<T>,
      prev: NodeOption<T>,
  }

  impl<T> Node<T> {
      fn new(x: T, n: NodeOption<T>, p: NodeOption<T>) -> NodeRef<T> {
          Rc::new(RefCell::new(Node {
              val: x,
              next: n,
              prev: p,
          }))
      }
  }

  struct LinkedList<T> {
      head: NodeOption<T>,
      tail: NodeOption<T>,
      len: usize,
  }

  impl<T: std::cmp::PartialEq + std::fmt::Display> LinkedList<T> {
      fn new() -> Self {
          LinkedList {
              head: None,
              tail: None,
              len: 0,
          }
      }
      fn insert(&mut self, x: T) {
          let temp = match &self.head {
              Some(m) => Node::new(x, Some(Rc::clone(&m)), None),
              None => Node::new(x, None, None),
          };
          self.len += 1;
          self.head = Some(Rc::clone(&temp));
          if self.tail.is_none() {
              self.tail = Some(Rc::clone(&temp));
          }
      }

      fn print_list(&self) {
          let mut t = match &self.head {
              Some(x) => Rc::clone(&x),
              None => return,
          };
          loop {
              print!("{} ", t.borrow().val);
              let temp = Rc::clone(&t);
              match &temp.borrow().next {
                  Some(x) => t = Rc::clone(x),
                  None => break,
              };
          }
      }
      fn search(&self, k: T) -> Option<usize> {
          let mut t = match &self.head {
              Some(x) => Rc::clone(&x),
              None => return None,
          };
          let mut pos = 0;
          loop {
              let temp = Rc::clone(&t);
              if temp.borrow().val == k {
                  return Some(pos);
              }
              match &temp.borrow().next {
                  Some(x) => t = Rc::clone(x),
                  None => break,
              };
              pos += 1;
          }
          None
      }
  }
#+end_src
